df_raw <- do.call(rbind, df_raw)
dim(df_raw)
selected_variables <- c('DirectChol', 'Gender', 'Age', 'Race1', 'Poverty', 'BMI',
'BPDiaAve', 'BPSysAve', 'Diabetes', 'PhysActiveDays',
'SmokeNow')
df.withNA = df_raw[selected_variables]
complete_rows <- complete.cases(df.withNA[selected_variables]) #Rid of all NA's
df.withoutNA <- df.withNA[complete_rows, ]
df.withoutNA  <- df.withoutNA[, selected_variables]
dim(df.withoutNA)
df.withoutNA[df.withoutNA$Poverty <= 1.30, "Poverty"] = 0
df.withoutNA[df.withoutNA$Poverty <= 1.85 & df.withoutNA$Poverty > 1.30, "Poverty"] = 1
df.withoutNA[df.withoutNA$Poverty <= 3.50 & df.withoutNA$Poverty > 1.85 , "Poverty"] = 2
df.withoutNA[df.withoutNA$Poverty > 3.50 , "Poverty"] = 3
df.withoutNA$Poverty <- as.factor(df.withoutNA$Poverty)
df.withoutNA  %>%
group_by(Race1) %>%
summarize(n = n())
df.withoutNA %>%
group_by(Poverty) %>%
summarize(n = n())
###############################################################
#                                                             #
#                                                             #
#                     Model fitting                           #
#                                                             #
#                                                             #
###############################################################
model = lm(data = df,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
cookd(model)
car::cookd(model)
plot(cooks.distance(model))
###############################################################
#                                                             #
#                                                             #
#                     Model fitting                           #
#                                                             #
#                                                             #
###############################################################
model = lm(data = df.withoutNA,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
res <- resid(model)
plot(fitted(model), res)
abline(0,0)
qqnorm(res)
qqline(res)
plot(density(res))
shapiro.test(df$DirectChol)
plot(cooks.distance(model))
4/(dim(df.withoutNA)[1] - 9 - 1)
plot(model,which=3)
rstandard(model)
plot(rstudent(model),fitted.values(model))
plot(rstandard(model),fitted.values(model))
plot(rstudent(model),fitted.values(model))
plot(fitted.values(model),rstandard(model))
plot(fitted.values(model),rstudent(model))
res <- resid(model)
plot(fitted(model), res)
plot(model,which=3)
plot(model,which=2)
plot(model,which=2)
plot(model,which=2)
plot(fitted.values(model),rstandard(model))
plot(model,which=2)
plot(model,which=2)
plot(model,which=2)
plot(model,which=2)
plot(model,which=2)
plot(model,which=1)
df
#58972
#66115
#59962
plot(model,which=2)
#58972
#66115
#59962
plot(model,which=3)
#58972
#66115
#59962
plot(model,which=4)
summary(model)
model.log = lm(data = df.withoutNA,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model.log)
model.withInteraction = lm(data = df.withoutNA, log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve + as.factor(Diabetes) + PhysActiveDays + as.factor(SmokeNow)
+ as.factor(Diabetes)*as.factor(Gender) + as.factor(Diabetes)*Age + as.factor(Diabetes)*as.factor(Race1)
+ as.factor(Diabetes)*as.factor(Poverty) + as.factor(Diabetes)*BMI + as.factor(Diabetes)*BPDiaAve
+ as.factor(Diabetes)*BPSysAve + as.factor(Diabetes)* PhysActiveDays + as.factor(Diabetes)*as.factor(SmokeNow))
summary(model.withInteraction)
model.new = lm(data = df.withoutNA, log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) +
BMI + BPDiaAve + BPSysAve + as.factor(Diabetes) + PhysActiveDays + as.factor(SmokeNow) + BMI:as.factor(Diabetes))
summary(model.new)
anova(model.withInteraction)
anova(model.withInteraction,model.log)
###############################################################
#                                                             #
#                                                             #
#                     Model fitting                           #
#                                                             #
#                                                             #
###############################################################
crude.model = lm(data = df.withoutNA, DirectChol ~as.factor(Diabetes))
summary(crude.model)
resid(crude.model)
plot(fitted.values(crude.model),resid(crude.model))
summary(crude.model)
data(NHANES)
summary(NHANES)
NHANES = as.data.frame(NHANES)
dim(NHANES)
df_raw <- NHANES
df_raw <- df_raw[df_raw$Age >=20,]
df_raw <- df_raw[df_raw$BPDiaAve != 0,]
# split df into different groups by id after removing duplicates
df_raw <- unique(df_raw)
# bind rows together
#df_raw <- do.call(rbind, df_raw)
dim(df_raw)
selected_variables <- c('DirectChol', 'Gender', 'Age', 'Race1', 'Poverty', 'BMI',
'BPDiaAve', 'BPSysAve', 'Diabetes', 'PhysActiveDays',
'SmokeNow')
df.withNA = df_raw[selected_variables]
complete_rows <- complete.cases(df.withNA[selected_variables]) #Rid of all NA's
df.withoutNA <- df.withNA[complete_rows, ]
df.withoutNA  <- df.withoutNA[, selected_variables]
dim(df.withoutNA)
df.withoutNA[df.withoutNA$Poverty <= 1.30, "Poverty"] = 0
df.withoutNA[df.withoutNA$Poverty <= 1.85 & df.withoutNA$Poverty > 1.30, "Poverty"] = 1
df.withoutNA[df.withoutNA$Poverty <= 3.50 & df.withoutNA$Poverty > 1.85 , "Poverty"] = 2
df.withoutNA[df.withoutNA$Poverty > 3.50 , "Poverty"] = 3
df.withoutNA$Poverty <- as.factor(df.withoutNA$Poverty)
df.withoutNA  %>%
group_by(Race1) %>%
summarize(n = n())
df.withoutNA %>%
group_by(Poverty) %>%
summarize(n = n())
df.withoutNA  %>%
group_by(Race1) %>%
summarize(n = n())
###############################################################
#                                                             #
#                                                             #
#                     Model fitting                           #
#                                                             #
#                                                             #
###############################################################
crude.model = lm(data = df.withoutNA, DirectChol ~as.factor(Diabetes))
summary(crude.model)
plot(fitted.values(crude.model),resid(crude.model))
model = lm(data = df.withoutNA,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model)
model.log = lm(data = df.withoutNA,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model.log)
model.new = lm(data = df.withoutNA, log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) +
BMI + BPDiaAve + BPSysAve + as.factor(Diabetes) + PhysActiveDays + as.factor(SmokeNow) + BMI:as.factor(Diabetes))
summary(model.new)
res <- resid(model)
model.log = lm(data = df.withoutNA,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model.log)
df.withoutNA %>%
ggplot(aes(BMI, DirectChol)) +
geom_line(aes(group = Diabetes, color = Diabetes))
df.withoutNA %>%
ggplot(aes(x = BMI, y = DirectChol, color = Diabetes)) +
geom_smooth(method = "lm")
model.log = lm(data = df.withoutNA,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model.log)
qqnorm(res)
res <- resid(model.log)
plot(fitted(model.log), res)
abline(0,0)
model = lm(data = df.withoutNA,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model)
res <- resid(model)
plot(fitted(model), res)
model.log = lm(data = df.withoutNA,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model.log)
res <- resid(model.log)
plot(fitted(model.log), res)
model = lm(data = df.withoutNA,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model)
res <- resid(model)
plot(fitted(model), res)
abline(0,0)
qqnorm(res)
qqline(res)
plot(density(res))
qqnorm(res)
qqline(res)
model.log = lm(data = df.withoutNA,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model.log)
res <- resid(model.log)
plot(fitted(model.log), res)
abline(0,0)
qqnorm(res)
qqline(res)
plot(density(res))
qqnorm(res)
qqline(res)
min(df$BMI)
min(df.withoutNA$BMI)
min(df.withoutNA$Age)
model.new = lm(data = df.withoutNA, log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) +
BMI + BPDiaAve + BPSysAve + as.factor(Diabetes) + PhysActiveDays + as.factor(SmokeNow) + BMI:as.factor(Diabetes))
summary(model.new)
length(df.withoutNA$BMI >= 40)
sum(df.withoutNA$BMI >= 40)
sum(df.withoutNA$BMI >= 50)
y = rnorm(10)
location = matrix(c(rnorm(20)),nrow = 2)
location
kernelMatrix = matrix(rnorm(10*10),ncol = 10, nrow = 10)
kernelMatrix
y = rnorm(10)
location = matrix(c(rnorm(20)),nrow = 2)
m = 8
kernelMatrix = matrix(rnorm(10*10),ncol = 10, nrow = 10)
##working with directed acyclic graphs (DAGS) to define each set of neighbors
#order input points si's according to some criterion (sort by first coordinate)
ordered.s = t(location[,order(location[1,])])
ordered.s
n = length(y)
#define a valid distance metric between points (Euclidean distance)
i = 1:n
ordered.si = ordered.s[1:i,]
dered.s
ordered.s
location
ordered.s
ordered.si = ordered.s[1:m,]
ordered.si
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))
dist.si = foreach(j = 1:(nrow(ordered.s), .combine = c ) %do% euc.dist(ordered.si[i,],ordered.si[j,])
library(foreach)
dist.si = foreach(j = 1:nrow(ordered.s), .combine = c ) %do% euc.dist(ordered.si[i,],ordered.si[j,])
dist.si = foreach(j = 1:nrow(ordered.s - 1), .combine = c ) %do% euc.dist(ordered.si[i,],ordered.si[j,])
nrow(ordered.s)
dist.si = outer(i = 1:n, j = 1:n,function(i, j) sqrt(sum((order.s[i,] - ordered.s[j,])^2)))
dist.si = outer(i = 1:n, j = 1:n, function(i, j) sqrt(sum((order.s[i,] - ordered.s[j,])^2)))
dist.si = outer(1:n,1:n, Vectorize(function(i, j) sqrt(sum((order.s[i,] - ordered.s[j,])^2))))
##working with directed acyclic graphs (DAGS) to define each set of neighbors
#order input points si's according to some criterion (sort by first coordinate)
ordered.s = t(location[,order(location[1,])])
dist.si = outer(1:n,1:n, Vectorize(function(i, j) sqrt(sum((ordered.s[i,] - ordered.s[j,])^2))))
dist.si
ordered.s
x1 = c(-1.80822895, -0.7323081)
x2 = c(-0.89259065,  0.3860791)
sqrt((sum(x1 - x2))^2)
sqrt((sum(x1 - x2)^2))
sqrt(sum((x1 - x2)^2))
#for each element i, define m nearest neighbors N(si) to be the set of points sj1,...,sjm
#such that all neighbor indices j1,...,jm are less than i
i = 2
orderdist.si[i,]
order(dist.si[i,])
dist.si[i,]
order(dist.si[i,])
sort(dist.si[i,])
dist.si[i,]
dist.si[i,][2]
dist.si[i,][-i]
sort(dist.si[i,][-i])
order(dist.si[i,][-i])
order(location[1,])
location[1,]
order(dist.si[i,])[1:i]
ordered.s(order(dist.si[i,])[1:i])
ordered.s[order(dist.si[i,])[1:i],]
#for each element i, define m nearest neighbors N(si) to be the set of points sj1,...,sjm
#such that all neighbor indices j1,...,jm are less than i
i = 10
ordered.s[order(dist.si[i,])[1:i],]
dist.si[i,]
order(dist.si[i,])
disti = dist.si[i,]
disti[order(dist.si[i,])]
ordered.s
ordered.s[order(dist.si[i,])[1:m],]
order(dist.si[i,])
ordered.s[order(dist.si[i,])[2:m],]
ordered.s[order(dist.si[i,])[2:(m+1)],]
order(dist.si[i,])[2:(m+1)]
y_loc = y
y
location
rbind(location,y)
y_loc = rbind(location,y)
##working with directed acyclic graphs (DAGS) to define each set of neighbors
#order input points si's according to some criterion (sort by first coordinate)
ordered.s = t(y_loc[,order(location[1,])])
ordered.s
ordered.s = t(location[,order(location[1,])])
##working with directed acyclic graphs (DAGS) to define each set of neighbors
#order input points si's according to some criterion (sort by first coordinate)
ordered.y_loc = t(y_loc[,order(location[1,])])
neighbors.si = ordered.y_loc[neighor.order,]
neighbor.order = order(dist.si[i,])[2:(m+1)]
neighbors.si = ordered.y_loc[neighor.order,]
neighbors.si = ordered.y_loc[neighbor.order,]
neighbors.si
neighbor.order$y
neighbor.order[,"y"]
k = nrow(location)
k
##yN(si) is the subvector of y containing all yj such that sj is in N(si)
yNsi = neighbor.order[,k+1]
neighbor.order
##yN(si) is the subvector of y containing all yj such that sj is in N(si)
yNsi = neighbor.si[,k+1]
neighbors.si = ordered.y_loc[neighbor.order,]
##yN(si) is the subvector of y containing all yj such that sj is in N(si)
yNsi = neighbor.si[,k+1]
##yN(si) is the subvector of y containing all yj such that sj is in N(si)
yNsi = neighbors.si[,k+1]
neighbors.si
##yN(si) is the subvector of y containing all yj such that sj is in N(si)
yNsi = neighbors.si[,k+1]
##construct Kernel Matrix using elements in N(si)
Ksi = kernelMatrix
neighbor.order
neighbors.si
which(location[1,] == neighbors.si[1,])
c(neighbors.si[1,])
c(neighbors.si[,1])
location[,1]
location[1,]
location[1,] == c(neighbors.si[,1])
c(neighbors.si[,1])
match(neighbors.si[,1],location[1,])
##construct Kernel Matrix using elements in N(si)
Ksi = kernelMatrix[i,i]
Ksi
kernelMatrix
KNsi = kernelMatrix[which.Nsi,which.Nsi]
which.Nsi = match(neighbors.si[,1],location[1,])
KNsi = kernelMatrix[which.Nsi,which.Nsi]
KNsi
Ksi.Nsi = kernelMatrix[i,which.Nsi]
Ksi.Nsi
#Fsi = Ksi - Ksi,N(si) %*% solve(KN(si)) %*% t(Ksi,N(si))
Fsi = Ksi - Ksi.Nsi%*%solve(KNsi)%*%t(Ksi.Nsi)
Ksi.Nsi
Ksi.Nsi%*%solve(KNsi)
t(Ksi.Nsi)
Ksi.Nsi%*%solve(KNsi)%*%t(Ksi.Nsi)
Ksi.Nsi%*%solve(KNsi)
solve(KNsi)%*%t(Ksi.Nsi)
solve(KNsi)
t(Ksi.Nsi)
Ksi.Nsi
solve(KNsi)%*%Ksi.Nsi
Ksi.Nsi%*%solve(KNsi)%*%Ksi.Nsi
Ksi
#Fsi = Ksi - Ksi,N(si) %*% solve(KN(si)) %*% t(Ksi,N(si))
Fsi = Ksi - Ksi.Nsi%*%solve(KNsi)%*%Ksi.Nsi
Fsi
Ksi.Nsi
Ksi.Nsi%*%solve(KNsi)%*%Ksi.Nsi
##densities for NNGP
#Bsi = Ksi,N(si) %*% KN(si)
Bsi = Ksi.Nsi %*% KN(si)
##densities for NNGP
#Bsi = Ksi,N(si) %*% KN(si)
Bsi = Ksi.Nsi %*% KNsi
Bsi
install.packages("spatialPCA")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
# Install SpatialPCA
devtools::install_github("shangll123/SpatialPCA")
# Install devtools, if necessary
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
# Install SpatialPCA
devtools::install_github("shangll123/SpatialPCA")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
# Install SpatialPCA
devtools::install_github("shangll123/SpatialPCA")
library(NHANES)
library(tidyverse)
library(dplyr)
library(MASS)
library(knitr)
library(car)
NHANES_raw <- unique(NHANES)
dim(NHANES_raw)
NHANES_raw = as.data.frame(NHANES_raw)
selected_variables <- c('DirectChol', 'Gender', 'Age', 'Race1', 'Poverty', 'BMI',
'BPDiaAve', 'BPSysAve', 'Diabetes', 'PhysActiveDays',
'SmokeNow')
df_raw <- NHANES_raw[, selected_variables]
sum(df_raw$BPDiaAve == 0)
df_raw$BPDiaAve
df_raw$BPDiaAve == 0
sum(df_raw$BPDiaAve == 0 ,na.omit=T)
NHANES_raw <- unique(NHANES)
NHANES_raw = as.data.frame(NHANES_raw)
selected_variables <- c('DirectChol', 'Gender', 'Age', 'Race1', 'Poverty', 'BMI',
'BPDiaAve', 'BPSysAve', 'Diabetes', 'PhysActiveDays',
'SmokeNow')
df_raw <- NHANES_raw[, selected_variables]
sum(df_raw$BPDiaAve == 0)
sum(df_raw$BPDiaAve != 0)
sum(df_raw$BPDiaAve == 0, na.omit = T)
t = na.omit(df$BPDiaAve)
t
sum(t == 0)
dim(df_raw)
df_raw <- df_raw %>%
filter(Age > 19)
dim(df_raw)
7832 - 5478
complete_rows <- complete.cases(df_raw[selected_variables]) #Rid of all NA's
dim(complete_rows)
complete_rows
df <- df_raw[complete_rows, ]
dim(df)
5478 - 1049
library(NHANES)
library(tidyverse)
library(NHANES)
library(tidyverse)
library(dplyr)
library(MASS)
library(knitr)
library(car)
NHANES_raw <- unique(NHANES)
NHANES_raw = as.data.frame(NHANES_raw)
selected_variables <- c('DirectChol', 'Gender', 'Age', 'Race1', 'Poverty', 'BMI',
'BPDiaAve', 'BPSysAve', 'Diabetes', 'PhysActiveDays',
'SmokeNow')
df_raw <- NHANES_raw[, selected_variables]
# Remove those with Average Diastolic Blood Pressure 0
# Keep those whose age is 20 or above
df_raw$BPDiaAve[df_raw$BPDiaAve == 0 ] <- NA
df_raw <- df_raw %>%
filter(Age > 19)
# -------------------------------------------------------------------------
complete_rows <- complete.cases(df_raw[selected_variables]) #Rid of all NA's
df <- df_raw[complete_rows, ]
quantile(df$DirectChol)
quantile(NHANES_raw$TotChol)
quantile(NHANES_raw$TotChol,na.rm = T)
40 * 0.02586
hist(df$DirectChol, main = "Histogram for direct HDL level")
hist(df$DirectChol, main = "Histogram for direct HDL level", xlab = "Direct HDL level in mmol/L")
model = lm(data = df,  DirectChol ~ as.factor(Diabetes))
summary(model)
model = lm(data = df,  log(DirectChol) ~ as.factor(Diabetes))
summary(model)
plot(resid(model))
qqplot(resid(model))
qqplot(model)
qqPlot(model)
# Fit full model
model = lm(data = df,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model)
plot(resid(model))
# Fit full model
model = lm(data = df,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
plot(resid(model))
# Fit full model
model = lm(data = df,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
plot(resid(model))
model = lm(data = df,  log(DirectChol) ~ as.factor(Diabetes))
model = lm(data = df,  DirectChol ~ as.factor(Diabetes))
summary(model)
plot(resid(model))
# Categorizing Poverty in both dataframes
df[df$Poverty <= 1.30, "Poverty"] = 0
df[df$Poverty <= 1.85 & df$Poverty > 1.30, "Poverty"] = 1
df[df$Poverty <= 3.50 & df$Poverty > 1.85 , "Poverty"] = 2
df[df$Poverty > 3.50 , "Poverty"] = 3
df$Poverty <- as.factor(df$Poverty)
# Fit full model
model = lm(data = df,  DirectChol ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model)
plot(resid(model))
plot(model$fitted.values,resid(model))
model = lm(data = df,  DirectChol ~ as.factor(Diabetes))
summary(model)
plot(model$fitted.values,resid(model))
model = lm(data = df,  DirectChol ~ as.factor(Diabetes))
summary(model)
# Fit full model
model = lm(data = df,  log(DirectChol) ~ as.factor(Gender) + Age + as.factor(Race1) + as.factor(Poverty)
+ BMI + BPDiaAve + BPSysAve  + as.factor(Diabetes) + as.factor(SmokeNow))
summary(model)
library(xtable)
model = lm(data = df,  DirectChol ~ as.factor(Diabetes))
summary(model)
xtable(summary(model))
